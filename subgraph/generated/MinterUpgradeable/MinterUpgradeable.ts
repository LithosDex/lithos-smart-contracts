// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get weekly(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get circulating_supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get circulating_emission(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MinterUpgradeable extends ethereum.SmartContract {
  static bind(address: Address): MinterUpgradeable {
    return new MinterUpgradeable("MinterUpgradeable", address);
  }

  EMISSION(): BigInt {
    let result = super.call("EMISSION", "EMISSION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EMISSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("EMISSION", "EMISSION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOCK(): BigInt {
    let result = super.call("LOCK", "LOCK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("LOCK", "LOCK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TEAM_RATE(): BigInt {
    let result = super.call("MAX_TEAM_RATE", "MAX_TEAM_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_TEAM_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TEAM_RATE",
      "MAX_TEAM_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REBASEMAX(): BigInt {
    let result = super.call("REBASEMAX", "REBASEMAX():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REBASEMAX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("REBASEMAX", "REBASEMAX():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TAIL_EMISSION(): BigInt {
    let result = super.call("TAIL_EMISSION", "TAIL_EMISSION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TAIL_EMISSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TAIL_EMISSION",
      "TAIL_EMISSION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WEEK(): BigInt {
    let result = super.call("WEEK", "WEEK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_WEEK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("WEEK", "WEEK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _lithos(): Address {
    let result = super.call("_lithos", "_lithos():(address)", []);

    return result[0].toAddress();
  }

  try__lithos(): ethereum.CallResult<Address> {
    let result = super.tryCall("_lithos", "_lithos():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _rewards_distributor(): Address {
    let result = super.call(
      "_rewards_distributor",
      "_rewards_distributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__rewards_distributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_rewards_distributor",
      "_rewards_distributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _ve(): Address {
    let result = super.call("_ve", "_ve():(address)", []);

    return result[0].toAddress();
  }

  try__ve(): ethereum.CallResult<Address> {
    let result = super.tryCall("_ve", "_ve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _voter(): Address {
    let result = super.call("_voter", "_voter():(address)", []);

    return result[0].toAddress();
  }

  try__voter(): ethereum.CallResult<Address> {
    let result = super.tryCall("_voter", "_voter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  active_period(): BigInt {
    let result = super.call("active_period", "active_period():(uint256)", []);

    return result[0].toBigInt();
  }

  try_active_period(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "active_period",
      "active_period():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculate_emission(): BigInt {
    let result = super.call(
      "calculate_emission",
      "calculate_emission():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculate_emission(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculate_emission",
      "calculate_emission():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculate_rebase(_weeklyMint: BigInt): BigInt {
    let result = super.call(
      "calculate_rebase",
      "calculate_rebase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_weeklyMint)]
    );

    return result[0].toBigInt();
  }

  try_calculate_rebase(_weeklyMint: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculate_rebase",
      "calculate_rebase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_weeklyMint)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  check(): boolean {
    let result = super.call("check", "check():(bool)", []);

    return result[0].toBoolean();
  }

  try_check(): ethereum.CallResult<boolean> {
    let result = super.tryCall("check", "check():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  circulating_emission(): BigInt {
    let result = super.call(
      "circulating_emission",
      "circulating_emission():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_circulating_emission(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "circulating_emission",
      "circulating_emission():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  circulating_supply(): BigInt {
    let result = super.call(
      "circulating_supply",
      "circulating_supply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_circulating_supply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "circulating_supply",
      "circulating_supply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isFirstMint(): boolean {
    let result = super.call("isFirstMint", "isFirstMint():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFirstMint(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFirstMint", "isFirstMint():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingTeam(): Address {
    let result = super.call("pendingTeam", "pendingTeam():(address)", []);

    return result[0].toAddress();
  }

  try_pendingTeam(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingTeam", "pendingTeam():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  period(): BigInt {
    let result = super.call("period", "period():(uint256)", []);

    return result[0].toBigInt();
  }

  try_period(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("period", "period():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  team(): Address {
    let result = super.call("team", "team():(address)", []);

    return result[0].toAddress();
  }

  try_team(): ethereum.CallResult<Address> {
    let result = super.tryCall("team", "team():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  teamRate(): BigInt {
    let result = super.call("teamRate", "teamRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_teamRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("teamRate", "teamRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  update_period(): BigInt {
    let result = super.call("update_period", "update_period():(uint256)", []);

    return result[0].toBigInt();
  }

  try_update_period(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "update_period",
      "update_period():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weekly(): BigInt {
    let result = super.call("weekly", "weekly():(uint256)", []);

    return result[0].toBigInt();
  }

  try_weekly(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weekly", "weekly():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weekly_emission(): BigInt {
    let result = super.call(
      "weekly_emission",
      "weekly_emission():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_weekly_emission(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "weekly_emission",
      "weekly_emission():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _initializeCall extends ethereum.Call {
  get inputs(): _initializeCall__Inputs {
    return new _initializeCall__Inputs(this);
  }

  get outputs(): _initializeCall__Outputs {
    return new _initializeCall__Outputs(this);
  }
}

export class _initializeCall__Inputs {
  _call: _initializeCall;

  constructor(call: _initializeCall) {
    this._call = call;
  }

  get claimants(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get max(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class _initializeCall__Outputs {
  _call: _initializeCall;

  constructor(call: _initializeCall) {
    this._call = call;
  }
}

export class AcceptTeamCall extends ethereum.Call {
  get inputs(): AcceptTeamCall__Inputs {
    return new AcceptTeamCall__Inputs(this);
  }

  get outputs(): AcceptTeamCall__Outputs {
    return new AcceptTeamCall__Outputs(this);
  }
}

export class AcceptTeamCall__Inputs {
  _call: AcceptTeamCall;

  constructor(call: AcceptTeamCall) {
    this._call = call;
  }
}

export class AcceptTeamCall__Outputs {
  _call: AcceptTeamCall;

  constructor(call: AcceptTeamCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __ve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get __rewards_distributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetEmissionCall extends ethereum.Call {
  get inputs(): SetEmissionCall__Inputs {
    return new SetEmissionCall__Inputs(this);
  }

  get outputs(): SetEmissionCall__Outputs {
    return new SetEmissionCall__Outputs(this);
  }
}

export class SetEmissionCall__Inputs {
  _call: SetEmissionCall;

  constructor(call: SetEmissionCall) {
    this._call = call;
  }

  get _emission(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEmissionCall__Outputs {
  _call: SetEmissionCall;

  constructor(call: SetEmissionCall) {
    this._call = call;
  }
}

export class SetRebaseCall extends ethereum.Call {
  get inputs(): SetRebaseCall__Inputs {
    return new SetRebaseCall__Inputs(this);
  }

  get outputs(): SetRebaseCall__Outputs {
    return new SetRebaseCall__Outputs(this);
  }
}

export class SetRebaseCall__Inputs {
  _call: SetRebaseCall;

  constructor(call: SetRebaseCall) {
    this._call = call;
  }

  get _rebase(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebaseCall__Outputs {
  _call: SetRebaseCall;

  constructor(call: SetRebaseCall) {
    this._call = call;
  }
}

export class SetRewardDistributorCall extends ethereum.Call {
  get inputs(): SetRewardDistributorCall__Inputs {
    return new SetRewardDistributorCall__Inputs(this);
  }

  get outputs(): SetRewardDistributorCall__Outputs {
    return new SetRewardDistributorCall__Outputs(this);
  }
}

export class SetRewardDistributorCall__Inputs {
  _call: SetRewardDistributorCall;

  constructor(call: SetRewardDistributorCall) {
    this._call = call;
  }

  get _rewardDistro(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardDistributorCall__Outputs {
  _call: SetRewardDistributorCall;

  constructor(call: SetRewardDistributorCall) {
    this._call = call;
  }
}

export class SetTeamCall extends ethereum.Call {
  get inputs(): SetTeamCall__Inputs {
    return new SetTeamCall__Inputs(this);
  }

  get outputs(): SetTeamCall__Outputs {
    return new SetTeamCall__Outputs(this);
  }
}

export class SetTeamCall__Inputs {
  _call: SetTeamCall;

  constructor(call: SetTeamCall) {
    this._call = call;
  }

  get _team(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTeamCall__Outputs {
  _call: SetTeamCall;

  constructor(call: SetTeamCall) {
    this._call = call;
  }
}

export class SetTeamRateCall extends ethereum.Call {
  get inputs(): SetTeamRateCall__Inputs {
    return new SetTeamRateCall__Inputs(this);
  }

  get outputs(): SetTeamRateCall__Outputs {
    return new SetTeamRateCall__Outputs(this);
  }
}

export class SetTeamRateCall__Inputs {
  _call: SetTeamRateCall;

  constructor(call: SetTeamRateCall) {
    this._call = call;
  }

  get _teamRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTeamRateCall__Outputs {
  _call: SetTeamRateCall;

  constructor(call: SetTeamRateCall) {
    this._call = call;
  }
}

export class SetVoterCall extends ethereum.Call {
  get inputs(): SetVoterCall__Inputs {
    return new SetVoterCall__Inputs(this);
  }

  get outputs(): SetVoterCall__Outputs {
    return new SetVoterCall__Outputs(this);
  }
}

export class SetVoterCall__Inputs {
  _call: SetVoterCall;

  constructor(call: SetVoterCall) {
    this._call = call;
  }

  get __voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVoterCall__Outputs {
  _call: SetVoterCall;

  constructor(call: SetVoterCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class Update_periodCall extends ethereum.Call {
  get inputs(): Update_periodCall__Inputs {
    return new Update_periodCall__Inputs(this);
  }

  get outputs(): Update_periodCall__Outputs {
    return new Update_periodCall__Outputs(this);
  }
}

export class Update_periodCall__Inputs {
  _call: Update_periodCall;

  constructor(call: Update_periodCall) {
    this._call = call;
  }
}

export class Update_periodCall__Outputs {
  _call: Update_periodCall;

  constructor(call: Update_periodCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
