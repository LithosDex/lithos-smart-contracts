// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousVotes(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newVotes(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get locktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get deposit_type(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get ts(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get prevSupply(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ts(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VotingEscrow__lockedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getEnd(): BigInt {
    return this.value1;
  }
}

export class VotingEscrow__point_historyResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getBias(): BigInt {
    return this.value0;
  }

  getSlope(): BigInt {
    return this.value1;
  }

  getTs(): BigInt {
    return this.value2;
  }

  getBlk(): BigInt {
    return this.value3;
  }
}

export class VotingEscrow__user_point_historyResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getBias(): BigInt {
    return this.value0;
  }

  getSlope(): BigInt {
    return this.value1;
  }

  getTs(): BigInt {
    return this.value2;
  }

  getBlk(): BigInt {
    return this.value3;
  }
}

export class VotingEscrow extends ethereum.SmartContract {
  static bind(address: Address): VotingEscrow {
    return new VotingEscrow("VotingEscrow", address);
  }

  DELEGATION_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DELEGATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATION_TYPEHASH",
      "DELEGATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_DELEGATES(): BigInt {
    let result = super.call("MAX_DELEGATES", "MAX_DELEGATES():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_DELEGATES(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_DELEGATES",
      "MAX_DELEGATES():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  artProxy(): Address {
    let result = super.call("artProxy", "artProxy():(address)", []);

    return result[0].toAddress();
  }

  try_artProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall("artProxy", "artProxy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  attachments(param0: BigInt): BigInt {
    let result = super.call("attachments", "attachments(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_attachments(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attachments",
      "attachments(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfAtNFT(_tokenId: BigInt, _block: BigInt): BigInt {
    let result = super.call(
      "balanceOfAtNFT",
      "balanceOfAtNFT(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfAtNFT(
    _tokenId: BigInt,
    _block: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfAtNFT",
      "balanceOfAtNFT(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfNFT(_tokenId: BigInt): BigInt {
    let result = super.call("balanceOfNFT", "balanceOfNFT(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOfNFT(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfNFT",
      "balanceOfNFT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfNFTAt(_tokenId: BigInt, _t: BigInt): BigInt {
    let result = super.call(
      "balanceOfNFTAt",
      "balanceOfNFTAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_t)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfNFTAt(
    _tokenId: BigInt,
    _t: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfNFTAt",
      "balanceOfNFTAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_t)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  block_number(): BigInt {
    let result = super.call("block_number", "block_number():(uint256)", []);

    return result[0].toBigInt();
  }

  try_block_number(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("block_number", "block_number():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_checkpoints(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  create_lock(_value: BigInt, _lock_duration: BigInt): BigInt {
    let result = super.call(
      "create_lock",
      "create_lock(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lock_duration)
      ]
    );

    return result[0].toBigInt();
  }

  try_create_lock(
    _value: BigInt,
    _lock_duration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create_lock",
      "create_lock(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lock_duration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  create_lock_for(
    _value: BigInt,
    _lock_duration: BigInt,
    _to: Address
  ): BigInt {
    let result = super.call(
      "create_lock_for",
      "create_lock_for(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lock_duration),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_create_lock_for(
    _value: BigInt,
    _lock_duration: BigInt,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create_lock_for",
      "create_lock_for(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_lock_duration),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  delegates(delegator: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(delegator)
    ]);

    return result[0].toAddress();
  }

  try_delegates(delegator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(delegator)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPastTotalSupply(timestamp: BigInt): BigInt {
    let result = super.call(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_getPastTotalSupply(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastVotes(account: Address, timestamp: BigInt): BigInt {
    let result = super.call(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPastVotes(
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastVotesIndex(account: Address, timestamp: BigInt): BigInt {
    let result = super.call(
      "getPastVotesIndex",
      "getPastVotesIndex(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPastVotesIndex(
    account: Address,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastVotesIndex",
      "getPastVotesIndex(address,uint256):(uint32)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address): BigInt {
    let result = super.call("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_last_user_slope(_tokenId: BigInt): BigInt {
    let result = super.call(
      "get_last_user_slope",
      "get_last_user_slope(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_get_last_user_slope(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_last_user_slope",
      "get_last_user_slope(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedOrOwner(_spender: Address, _tokenId: BigInt): boolean {
    let result = super.call(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    _spender: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  locked(param0: BigInt): VotingEscrow__lockedResult {
    let result = super.call("locked", "locked(uint256):(int128,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new VotingEscrow__lockedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_locked(param0: BigInt): ethereum.CallResult<VotingEscrow__lockedResult> {
    let result = super.tryCall("locked", "locked(uint256):(int128,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VotingEscrow__lockedResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  locked__end(_tokenId: BigInt): BigInt {
    let result = super.call("locked__end", "locked__end(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_locked__end(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "locked__end",
      "locked__end(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(param0: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownership_change(param0: BigInt): BigInt {
    let result = super.call(
      "ownership_change",
      "ownership_change(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_ownership_change(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownership_change",
      "ownership_change(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  point_history(param0: BigInt): VotingEscrow__point_historyResult {
    let result = super.call(
      "point_history",
      "point_history(uint256):(int128,int128,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new VotingEscrow__point_historyResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_point_history(
    param0: BigInt
  ): ethereum.CallResult<VotingEscrow__point_historyResult> {
    let result = super.tryCall(
      "point_history",
      "point_history(uint256):(int128,int128,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VotingEscrow__point_historyResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  slope_changes(param0: BigInt): BigInt {
    let result = super.call(
      "slope_changes",
      "slope_changes(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_slope_changes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slope_changes",
      "slope_changes(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supply(): BigInt {
    let result = super.call("supply", "supply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_supply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supply", "supply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(_interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  team(): Address {
    let result = super.call("team", "team():(address)", []);

    return result[0].toAddress();
  }

  try_team(): ethereum.CallResult<Address> {
    let result = super.tryCall("team", "team():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenOfOwnerByIndex(_owner: Address, _tokenIndex: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_tokenIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _tokenIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_tokenIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAt(_block: BigInt): BigInt {
    let result = super.call(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_block)]
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAt(_block: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_block)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAtT(t: BigInt): BigInt {
    let result = super.call(
      "totalSupplyAtT",
      "totalSupplyAtT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(t)]
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAtT(t: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAtT",
      "totalSupplyAtT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(t)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  user_point_epoch(param0: BigInt): BigInt {
    let result = super.call(
      "user_point_epoch",
      "user_point_epoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_user_point_epoch(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "user_point_epoch",
      "user_point_epoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  user_point_history(
    param0: BigInt,
    param1: BigInt
  ): VotingEscrow__user_point_historyResult {
    let result = super.call(
      "user_point_history",
      "user_point_history(uint256,uint256):(int128,int128,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new VotingEscrow__user_point_historyResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_user_point_history(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<VotingEscrow__user_point_historyResult> {
    let result = super.tryCall(
      "user_point_history",
      "user_point_history(uint256,uint256):(int128,int128,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VotingEscrow__user_point_historyResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  user_point_history__ts(_tokenId: BigInt, _idx: BigInt): BigInt {
    let result = super.call(
      "user_point_history__ts",
      "user_point_history__ts(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_idx)
      ]
    );

    return result[0].toBigInt();
  }

  try_user_point_history__ts(
    _tokenId: BigInt,
    _idx: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "user_point_history__ts",
      "user_point_history__ts(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_idx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  voted(param0: BigInt): boolean {
    let result = super.call("voted", "voted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_voted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("voted", "voted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  voter(): Address {
    let result = super.call("voter", "voter():(address)", []);

    return result[0].toAddress();
  }

  try_voter(): ethereum.CallResult<Address> {
    let result = super.tryCall("voter", "voter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get art_proxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AbstainCall extends ethereum.Call {
  get inputs(): AbstainCall__Inputs {
    return new AbstainCall__Inputs(this);
  }

  get outputs(): AbstainCall__Outputs {
    return new AbstainCall__Outputs(this);
  }
}

export class AbstainCall__Inputs {
  _call: AbstainCall;

  constructor(call: AbstainCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AbstainCall__Outputs {
  _call: AbstainCall;

  constructor(call: AbstainCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _approved(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AttachCall extends ethereum.Call {
  get inputs(): AttachCall__Inputs {
    return new AttachCall__Inputs(this);
  }

  get outputs(): AttachCall__Outputs {
    return new AttachCall__Outputs(this);
  }
}

export class AttachCall__Inputs {
  _call: AttachCall;

  constructor(call: AttachCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AttachCall__Outputs {
  _call: AttachCall;

  constructor(call: AttachCall) {
    this._call = call;
  }
}

export class CheckpointCall extends ethereum.Call {
  get inputs(): CheckpointCall__Inputs {
    return new CheckpointCall__Inputs(this);
  }

  get outputs(): CheckpointCall__Outputs {
    return new CheckpointCall__Outputs(this);
  }
}

export class CheckpointCall__Inputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class CheckpointCall__Outputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class Create_lockCall extends ethereum.Call {
  get inputs(): Create_lockCall__Inputs {
    return new Create_lockCall__Inputs(this);
  }

  get outputs(): Create_lockCall__Outputs {
    return new Create_lockCall__Outputs(this);
  }
}

export class Create_lockCall__Inputs {
  _call: Create_lockCall;

  constructor(call: Create_lockCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lock_duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Create_lockCall__Outputs {
  _call: Create_lockCall;

  constructor(call: Create_lockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Create_lock_forCall extends ethereum.Call {
  get inputs(): Create_lock_forCall__Inputs {
    return new Create_lock_forCall__Inputs(this);
  }

  get outputs(): Create_lock_forCall__Outputs {
    return new Create_lock_forCall__Outputs(this);
  }
}

export class Create_lock_forCall__Inputs {
  _call: Create_lock_forCall;

  constructor(call: Create_lock_forCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lock_duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class Create_lock_forCall__Outputs {
  _call: Create_lock_forCall;

  constructor(call: Create_lock_forCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class Deposit_forCall extends ethereum.Call {
  get inputs(): Deposit_forCall__Inputs {
    return new Deposit_forCall__Inputs(this);
  }

  get outputs(): Deposit_forCall__Outputs {
    return new Deposit_forCall__Outputs(this);
  }
}

export class Deposit_forCall__Inputs {
  _call: Deposit_forCall;

  constructor(call: Deposit_forCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Deposit_forCall__Outputs {
  _call: Deposit_forCall;

  constructor(call: Deposit_forCall) {
    this._call = call;
  }
}

export class DetachCall extends ethereum.Call {
  get inputs(): DetachCall__Inputs {
    return new DetachCall__Inputs(this);
  }

  get outputs(): DetachCall__Outputs {
    return new DetachCall__Outputs(this);
  }
}

export class DetachCall__Inputs {
  _call: DetachCall;

  constructor(call: DetachCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DetachCall__Outputs {
  _call: DetachCall;

  constructor(call: DetachCall) {
    this._call = call;
  }
}

export class Increase_amountCall extends ethereum.Call {
  get inputs(): Increase_amountCall__Inputs {
    return new Increase_amountCall__Inputs(this);
  }

  get outputs(): Increase_amountCall__Outputs {
    return new Increase_amountCall__Outputs(this);
  }
}

export class Increase_amountCall__Inputs {
  _call: Increase_amountCall;

  constructor(call: Increase_amountCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Increase_amountCall__Outputs {
  _call: Increase_amountCall;

  constructor(call: Increase_amountCall) {
    this._call = call;
  }
}

export class Increase_unlock_timeCall extends ethereum.Call {
  get inputs(): Increase_unlock_timeCall__Inputs {
    return new Increase_unlock_timeCall__Inputs(this);
  }

  get outputs(): Increase_unlock_timeCall__Outputs {
    return new Increase_unlock_timeCall__Outputs(this);
  }
}

export class Increase_unlock_timeCall__Inputs {
  _call: Increase_unlock_timeCall;

  constructor(call: Increase_unlock_timeCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lock_duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Increase_unlock_timeCall__Outputs {
  _call: Increase_unlock_timeCall;

  constructor(call: Increase_unlock_timeCall) {
    this._call = call;
  }
}

export class MergeCall extends ethereum.Call {
  get inputs(): MergeCall__Inputs {
    return new MergeCall__Inputs(this);
  }

  get outputs(): MergeCall__Outputs {
    return new MergeCall__Outputs(this);
  }
}

export class MergeCall__Inputs {
  _call: MergeCall;

  constructor(call: MergeCall) {
    this._call = call;
  }

  get _from(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MergeCall__Outputs {
  _call: MergeCall;

  constructor(call: MergeCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetArtProxyCall extends ethereum.Call {
  get inputs(): SetArtProxyCall__Inputs {
    return new SetArtProxyCall__Inputs(this);
  }

  get outputs(): SetArtProxyCall__Outputs {
    return new SetArtProxyCall__Outputs(this);
  }
}

export class SetArtProxyCall__Inputs {
  _call: SetArtProxyCall;

  constructor(call: SetArtProxyCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetArtProxyCall__Outputs {
  _call: SetArtProxyCall;

  constructor(call: SetArtProxyCall) {
    this._call = call;
  }
}

export class SetTeamCall extends ethereum.Call {
  get inputs(): SetTeamCall__Inputs {
    return new SetTeamCall__Inputs(this);
  }

  get outputs(): SetTeamCall__Outputs {
    return new SetTeamCall__Outputs(this);
  }
}

export class SetTeamCall__Inputs {
  _call: SetTeamCall;

  constructor(call: SetTeamCall) {
    this._call = call;
  }

  get _team(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTeamCall__Outputs {
  _call: SetTeamCall;

  constructor(call: SetTeamCall) {
    this._call = call;
  }
}

export class SetVoterCall extends ethereum.Call {
  get inputs(): SetVoterCall__Inputs {
    return new SetVoterCall__Inputs(this);
  }

  get outputs(): SetVoterCall__Outputs {
    return new SetVoterCall__Outputs(this);
  }
}

export class SetVoterCall__Inputs {
  _call: SetVoterCall;

  constructor(call: SetVoterCall) {
    this._call = call;
  }

  get _voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVoterCall__Outputs {
  _call: SetVoterCall;

  constructor(call: SetVoterCall) {
    this._call = call;
  }
}

export class SplitCall extends ethereum.Call {
  get inputs(): SplitCall__Inputs {
    return new SplitCall__Inputs(this);
  }

  get outputs(): SplitCall__Outputs {
    return new SplitCall__Outputs(this);
  }
}

export class SplitCall__Inputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SplitCall__Outputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class VotingCall extends ethereum.Call {
  get inputs(): VotingCall__Inputs {
    return new VotingCall__Inputs(this);
  }

  get outputs(): VotingCall__Outputs {
    return new VotingCall__Outputs(this);
  }
}

export class VotingCall__Inputs {
  _call: VotingCall;

  constructor(call: VotingCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VotingCall__Outputs {
  _call: VotingCall;

  constructor(call: VotingCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
