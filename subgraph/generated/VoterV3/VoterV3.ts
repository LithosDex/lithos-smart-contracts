// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Abstained extends ethereum.Event {
  get params(): Abstained__Params {
    return new Abstained__Params(this);
  }
}

export class Abstained__Params {
  _event: Abstained;

  constructor(event: Abstained) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddFactories extends ethereum.Event {
  get params(): AddFactories__Params {
    return new AddFactories__Params(this);
  }
}

export class AddFactories__Params {
  _event: AddFactories;

  constructor(event: AddFactories) {
    this._event = event;
  }

  get pairfactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gaugefactory(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Blacklisted extends ethereum.Event {
  get params(): Blacklisted__Params {
    return new Blacklisted__Params(this);
  }
}

export class Blacklisted__Params {
  _event: Blacklisted;

  constructor(event: Blacklisted) {
    this._event = event;
  }

  get blacklister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DistributeReward extends ethereum.Event {
  get params(): DistributeReward__Params {
    return new DistributeReward__Params(this);
  }
}

export class DistributeReward__Params {
  _event: DistributeReward;

  constructor(event: DistributeReward) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gauge(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GaugeCreated extends ethereum.Event {
  get params(): GaugeCreated__Params {
    return new GaugeCreated__Params(this);
  }
}

export class GaugeCreated__Params {
  _event: GaugeCreated;

  constructor(event: GaugeCreated) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get internal_bribe(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get external_bribe(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class GaugeKilled extends ethereum.Event {
  get params(): GaugeKilled__Params {
    return new GaugeKilled__Params(this);
  }
}

export class GaugeKilled__Params {
  _event: GaugeKilled;

  constructor(event: GaugeKilled) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GaugeRevived extends ethereum.Event {
  get params(): GaugeRevived__Params {
    return new GaugeRevived__Params(this);
  }
}

export class GaugeRevived__Params {
  _event: GaugeRevived;

  constructor(event: GaugeRevived) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NotifyReward extends ethereum.Event {
  get params(): NotifyReward__Params {
    return new NotifyReward__Params(this);
  }
}

export class NotifyReward__Params {
  _event: NotifyReward;

  constructor(event: NotifyReward) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetBribeFactory extends ethereum.Event {
  get params(): SetBribeFactory__Params {
    return new SetBribeFactory__Params(this);
  }
}

export class SetBribeFactory__Params {
  _event: SetBribeFactory;

  constructor(event: SetBribeFactory) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get latest(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetBribeFor extends ethereum.Event {
  get params(): SetBribeFor__Params {
    return new SetBribeFor__Params(this);
  }
}

export class SetBribeFor__Params {
  _event: SetBribeFor;

  constructor(event: SetBribeFor) {
    this._event = event;
  }

  get isInternal(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get old(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get latest(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get gauge(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SetGaugeFactory extends ethereum.Event {
  get params(): SetGaugeFactory__Params {
    return new SetGaugeFactory__Params(this);
  }
}

export class SetGaugeFactory__Params {
  _event: SetGaugeFactory;

  constructor(event: SetGaugeFactory) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get latest(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMinter extends ethereum.Event {
  get params(): SetMinter__Params {
    return new SetMinter__Params(this);
  }
}

export class SetMinter__Params {
  _event: SetMinter;

  constructor(event: SetMinter) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get latest(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetPairFactory extends ethereum.Event {
  get params(): SetPairFactory__Params {
    return new SetPairFactory__Params(this);
  }
}

export class SetPairFactory__Params {
  _event: SetPairFactory;

  constructor(event: SetPairFactory) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get latest(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetPermissionRegistry extends ethereum.Event {
  get params(): SetPermissionRegistry__Params {
    return new SetPermissionRegistry__Params(this);
  }
}

export class SetPermissionRegistry__Params {
  _event: SetPermissionRegistry;

  constructor(event: SetPermissionRegistry) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get latest(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetVoteDelay extends ethereum.Event {
  get params(): SetVoteDelay__Params {
    return new SetVoteDelay__Params(this);
  }
}

export class SetVoteDelay__Params {
  _event: SetVoteDelay;

  constructor(event: SetVoteDelay) {
    this._event = event;
  }

  get old(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get latest(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Whitelisted extends ethereum.Event {
  get params(): Whitelisted__Params {
    return new Whitelisted__Params(this);
  }
}

export class Whitelisted__Params {
  _event: Whitelisted;

  constructor(event: Whitelisted) {
    this._event = event;
  }

  get whitelister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VoterV3__createGaugeResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  get_gauge(): Address {
    return this.value0;
  }

  get_internal_bribe(): Address {
    return this.value1;
  }

  get_external_bribe(): Address {
    return this.value2;
  }
}

export class VoterV3__createGaugesResult {
  value0: Array<Address>;
  value1: Array<Address>;
  value2: Array<Address>;

  constructor(
    value0: Array<Address>,
    value1: Array<Address>,
    value2: Array<Address>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromAddressArray(this.value2));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }

  getValue2(): Array<Address> {
    return this.value2;
  }
}

export class VoterV3 extends ethereum.SmartContract {
  static bind(address: Address): VoterV3 {
    return new VoterV3("VoterV3", address);
  }

  MAX_VOTE_DELAY(): BigInt {
    let result = super.call("MAX_VOTE_DELAY", "MAX_VOTE_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_VOTE_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_VOTE_DELAY",
      "MAX_VOTE_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTE_DELAY(): BigInt {
    let result = super.call("VOTE_DELAY", "VOTE_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_VOTE_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("VOTE_DELAY", "VOTE_DELAY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _epochTimestamp(): BigInt {
    let result = super.call(
      "_epochTimestamp",
      "_epochTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__epochTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_epochTimestamp",
      "_epochTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _ve(): Address {
    let result = super.call("_ve", "_ve():(address)", []);

    return result[0].toAddress();
  }

  try__ve(): ethereum.CallResult<Address> {
    let result = super.tryCall("_ve", "_ve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bribefactory(): Address {
    let result = super.call("bribefactory", "bribefactory():(address)", []);

    return result[0].toAddress();
  }

  try_bribefactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("bribefactory", "bribefactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimable(param0: Address): BigInt {
    let result = super.call("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_claimable(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createGauge(_pool: Address, _gaugeType: BigInt): VoterV3__createGaugeResult {
    let result = super.call(
      "createGauge",
      "createGauge(address,uint256):(address,address,address)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_gaugeType)
      ]
    );

    return new VoterV3__createGaugeResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_createGauge(
    _pool: Address,
    _gaugeType: BigInt
  ): ethereum.CallResult<VoterV3__createGaugeResult> {
    let result = super.tryCall(
      "createGauge",
      "createGauge(address,uint256):(address,address,address)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_gaugeType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VoterV3__createGaugeResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  createGauges(
    _pool: Array<Address>,
    _gaugeTypes: Array<BigInt>
  ): VoterV3__createGaugesResult {
    let result = super.call(
      "createGauges",
      "createGauges(address[],uint256[]):(address[],address[],address[])",
      [
        ethereum.Value.fromAddressArray(_pool),
        ethereum.Value.fromUnsignedBigIntArray(_gaugeTypes)
      ]
    );

    return new VoterV3__createGaugesResult(
      result[0].toAddressArray(),
      result[1].toAddressArray(),
      result[2].toAddressArray()
    );
  }

  try_createGauges(
    _pool: Array<Address>,
    _gaugeTypes: Array<BigInt>
  ): ethereum.CallResult<VoterV3__createGaugesResult> {
    let result = super.tryCall(
      "createGauges",
      "createGauges(address[],uint256[]):(address[],address[],address[])",
      [
        ethereum.Value.fromAddressArray(_pool),
        ethereum.Value.fromUnsignedBigIntArray(_gaugeTypes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VoterV3__createGaugesResult(
        value[0].toAddressArray(),
        value[1].toAddressArray(),
        value[2].toAddressArray()
      )
    );
  }

  external_bribes(param0: Address): Address {
    let result = super.call(
      "external_bribes",
      "external_bribes(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_external_bribes(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "external_bribes",
      "external_bribes(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factories(): Array<Address> {
    let result = super.call("factories", "factories():(address[])", []);

    return result[0].toAddressArray();
  }

  try_factories(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("factories", "factories():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  factoryLength(): BigInt {
    let result = super.call("factoryLength", "factoryLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_factoryLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "factoryLength",
      "factoryLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gaugeFactories(): Array<Address> {
    let result = super.call(
      "gaugeFactories",
      "gaugeFactories():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_gaugeFactories(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "gaugeFactories",
      "gaugeFactories():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  gaugeFactoriesLength(): BigInt {
    let result = super.call(
      "gaugeFactoriesLength",
      "gaugeFactoriesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_gaugeFactoriesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gaugeFactoriesLength",
      "gaugeFactoriesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gauges(param0: Address): Address {
    let result = super.call("gauges", "gauges(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_gauges(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("gauges", "gauges(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gaugesDistributionTimestmap(param0: Address): BigInt {
    let result = super.call(
      "gaugesDistributionTimestmap",
      "gaugesDistributionTimestmap(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_gaugesDistributionTimestmap(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gaugesDistributionTimestmap",
      "gaugesDistributionTimestmap(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  internal_bribes(param0: Address): Address {
    let result = super.call(
      "internal_bribes",
      "internal_bribes(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_internal_bribes(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "internal_bribes",
      "internal_bribes(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAlive(param0: Address): boolean {
    let result = super.call("isAlive", "isAlive(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAlive(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAlive", "isAlive(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFactory(param0: Address): boolean {
    let result = super.call("isFactory", "isFactory(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isFactory(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFactory", "isFactory(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGauge(param0: Address): boolean {
    let result = super.call("isGauge", "isGauge(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isGauge(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGauge", "isGauge(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGaugeFactory(param0: Address): boolean {
    let result = super.call(
      "isGaugeFactory",
      "isGaugeFactory(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isGaugeFactory(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGaugeFactory",
      "isGaugeFactory(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(param0: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastVoted(param0: BigInt): BigInt {
    let result = super.call("lastVoted", "lastVoted(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastVoted(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastVoted", "lastVoted(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  length(): BigInt {
    let result = super.call("length", "length():(uint256)", []);

    return result[0].toBigInt();
  }

  try_length(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("length", "length():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minter(): Address {
    let result = super.call("minter", "minter():(address)", []);

    return result[0].toAddress();
  }

  try_minter(): ethereum.CallResult<Address> {
    let result = super.tryCall("minter", "minter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  permissionRegistry(): Address {
    let result = super.call(
      "permissionRegistry",
      "permissionRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_permissionRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "permissionRegistry",
      "permissionRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolForGauge(param0: Address): Address {
    let result = super.call("poolForGauge", "poolForGauge(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_poolForGauge(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolForGauge",
      "poolForGauge(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolVote(param0: BigInt, param1: BigInt): Address {
    let result = super.call("poolVote", "poolVote(uint256,uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_poolVote(param0: BigInt, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolVote",
      "poolVote(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolVoteLength(tokenId: BigInt): BigInt {
    let result = super.call(
      "poolVoteLength",
      "poolVoteLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_poolVoteLength(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolVoteLength",
      "poolVoteLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pools(param0: BigInt): Address {
    let result = super.call("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_pools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalWeight(): BigInt {
    let result = super.call("totalWeight", "totalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeight", "totalWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeightAt(_time: BigInt): BigInt {
    let result = super.call(
      "totalWeightAt",
      "totalWeightAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_time)]
    );

    return result[0].toBigInt();
  }

  try_totalWeightAt(_time: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWeightAt",
      "totalWeightAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_time)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ve(): Address {
    let result = super.call("ve", "ve():(address)", []);

    return result[0].toAddress();
  }

  try_ve(): ethereum.CallResult<Address> {
    let result = super.tryCall("ve", "ve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votes(param0: BigInt, param1: Address): BigInt {
    let result = super.call("votes", "votes(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_votes(param0: BigInt, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votes", "votes(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weights(_pool: Address): BigInt {
    let result = super.call("weights", "weights(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);

    return result[0].toBigInt();
  }

  try_weights(_pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weights", "weights(address):(uint256)", [
      ethereum.Value.fromAddress(_pool)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weightsAt(_pool: Address, _time: BigInt): BigInt {
    let result = super.call(
      "weightsAt",
      "weightsAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );

    return result[0].toBigInt();
  }

  try_weightsAt(_pool: Address, _time: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "weightsAt",
      "weightsAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _initCall extends ethereum.Call {
  get inputs(): _initCall__Inputs {
    return new _initCall__Inputs(this);
  }

  get outputs(): _initCall__Outputs {
    return new _initCall__Outputs(this);
  }
}

export class _initCall__Inputs {
  _call: _initCall;

  constructor(call: _initCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _permissionsRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class _initCall__Outputs {
  _call: _initCall;

  constructor(call: _initCall) {
    this._call = call;
  }
}

export class AddFactoryCall extends ethereum.Call {
  get inputs(): AddFactoryCall__Inputs {
    return new AddFactoryCall__Inputs(this);
  }

  get outputs(): AddFactoryCall__Outputs {
    return new AddFactoryCall__Outputs(this);
  }
}

export class AddFactoryCall__Inputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }

  get _pairFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gaugeFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddFactoryCall__Outputs {
  _call: AddFactoryCall;

  constructor(call: AddFactoryCall) {
    this._call = call;
  }
}

export class BlacklistCall extends ethereum.Call {
  get inputs(): BlacklistCall__Inputs {
    return new BlacklistCall__Inputs(this);
  }

  get outputs(): BlacklistCall__Outputs {
    return new BlacklistCall__Outputs(this);
  }
}

export class BlacklistCall__Inputs {
  _call: BlacklistCall;

  constructor(call: BlacklistCall) {
    this._call = call;
  }

  get _token(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class BlacklistCall__Outputs {
  _call: BlacklistCall;

  constructor(call: BlacklistCall) {
    this._call = call;
  }
}

export class ClaimBribesCall extends ethereum.Call {
  get inputs(): ClaimBribesCall__Inputs {
    return new ClaimBribesCall__Inputs(this);
  }

  get outputs(): ClaimBribesCall__Outputs {
    return new ClaimBribesCall__Outputs(this);
  }
}

export class ClaimBribesCall__Inputs {
  _call: ClaimBribesCall;

  constructor(call: ClaimBribesCall) {
    this._call = call;
  }

  get _bribes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimBribesCall__Outputs {
  _call: ClaimBribesCall;

  constructor(call: ClaimBribesCall) {
    this._call = call;
  }
}

export class ClaimBribes1Call extends ethereum.Call {
  get inputs(): ClaimBribes1Call__Inputs {
    return new ClaimBribes1Call__Inputs(this);
  }

  get outputs(): ClaimBribes1Call__Outputs {
    return new ClaimBribes1Call__Outputs(this);
  }
}

export class ClaimBribes1Call__Inputs {
  _call: ClaimBribes1Call;

  constructor(call: ClaimBribes1Call) {
    this._call = call;
  }

  get _bribes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }
}

export class ClaimBribes1Call__Outputs {
  _call: ClaimBribes1Call;

  constructor(call: ClaimBribes1Call) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get _fees(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFees1Call extends ethereum.Call {
  get inputs(): ClaimFees1Call__Inputs {
    return new ClaimFees1Call__Inputs(this);
  }

  get outputs(): ClaimFees1Call__Outputs {
    return new ClaimFees1Call__Outputs(this);
  }
}

export class ClaimFees1Call__Inputs {
  _call: ClaimFees1Call;

  constructor(call: ClaimFees1Call) {
    this._call = call;
  }

  get _bribes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }
}

export class ClaimFees1Call__Outputs {
  _call: ClaimFees1Call;

  constructor(call: ClaimFees1Call) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get _gauges(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class CreateGaugeCall extends ethereum.Call {
  get inputs(): CreateGaugeCall__Inputs {
    return new CreateGaugeCall__Inputs(this);
  }

  get outputs(): CreateGaugeCall__Outputs {
    return new CreateGaugeCall__Outputs(this);
  }
}

export class CreateGaugeCall__Inputs {
  _call: CreateGaugeCall;

  constructor(call: CreateGaugeCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gaugeType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateGaugeCall__Outputs {
  _call: CreateGaugeCall;

  constructor(call: CreateGaugeCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get _internal_bribe(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get _external_bribe(): Address {
    return this._call.outputValues[2].value.toAddress();
  }
}

export class CreateGaugesCall extends ethereum.Call {
  get inputs(): CreateGaugesCall__Inputs {
    return new CreateGaugesCall__Inputs(this);
  }

  get outputs(): CreateGaugesCall__Outputs {
    return new CreateGaugesCall__Outputs(this);
  }
}

export class CreateGaugesCall__Inputs {
  _call: CreateGaugesCall;

  constructor(call: CreateGaugesCall) {
    this._call = call;
  }

  get _pool(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _gaugeTypes(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class CreateGaugesCall__Outputs {
  _call: CreateGaugesCall;

  constructor(call: CreateGaugesCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get value1(): Array<Address> {
    return this._call.outputValues[1].value.toAddressArray();
  }

  get value2(): Array<Address> {
    return this._call.outputValues[2].value.toAddressArray();
  }
}

export class DistributeCall extends ethereum.Call {
  get inputs(): DistributeCall__Inputs {
    return new DistributeCall__Inputs(this);
  }

  get outputs(): DistributeCall__Outputs {
    return new DistributeCall__Outputs(this);
  }
}

export class DistributeCall__Inputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }

  get _gauges(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DistributeCall__Outputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }
}

export class Distribute1Call extends ethereum.Call {
  get inputs(): Distribute1Call__Inputs {
    return new Distribute1Call__Inputs(this);
  }

  get outputs(): Distribute1Call__Outputs {
    return new Distribute1Call__Outputs(this);
  }
}

export class Distribute1Call__Inputs {
  _call: Distribute1Call;

  constructor(call: Distribute1Call) {
    this._call = call;
  }

  get start(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get finish(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Distribute1Call__Outputs {
  _call: Distribute1Call;

  constructor(call: Distribute1Call) {
    this._call = call;
  }
}

export class DistributeAllCall extends ethereum.Call {
  get inputs(): DistributeAllCall__Inputs {
    return new DistributeAllCall__Inputs(this);
  }

  get outputs(): DistributeAllCall__Outputs {
    return new DistributeAllCall__Outputs(this);
  }
}

export class DistributeAllCall__Inputs {
  _call: DistributeAllCall;

  constructor(call: DistributeAllCall) {
    this._call = call;
  }
}

export class DistributeAllCall__Outputs {
  _call: DistributeAllCall;

  constructor(call: DistributeAllCall) {
    this._call = call;
  }
}

export class DistributeFeesCall extends ethereum.Call {
  get inputs(): DistributeFeesCall__Inputs {
    return new DistributeFeesCall__Inputs(this);
  }

  get outputs(): DistributeFeesCall__Outputs {
    return new DistributeFeesCall__Outputs(this);
  }
}

export class DistributeFeesCall__Inputs {
  _call: DistributeFeesCall;

  constructor(call: DistributeFeesCall) {
    this._call = call;
  }

  get _gauges(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DistributeFeesCall__Outputs {
  _call: DistributeFeesCall;

  constructor(call: DistributeFeesCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __ve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pairFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gaugeFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _bribes(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class KillGaugeCall extends ethereum.Call {
  get inputs(): KillGaugeCall__Inputs {
    return new KillGaugeCall__Inputs(this);
  }

  get outputs(): KillGaugeCall__Outputs {
    return new KillGaugeCall__Outputs(this);
  }
}

export class KillGaugeCall__Inputs {
  _call: KillGaugeCall;

  constructor(call: KillGaugeCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class KillGaugeCall__Outputs {
  _call: KillGaugeCall;

  constructor(call: KillGaugeCall) {
    this._call = call;
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class PokeCall extends ethereum.Call {
  get inputs(): PokeCall__Inputs {
    return new PokeCall__Inputs(this);
  }

  get outputs(): PokeCall__Outputs {
    return new PokeCall__Outputs(this);
  }
}

export class PokeCall__Inputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PokeCall__Outputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }
}

export class RemoveFactoryCall extends ethereum.Call {
  get inputs(): RemoveFactoryCall__Inputs {
    return new RemoveFactoryCall__Inputs(this);
  }

  get outputs(): RemoveFactoryCall__Outputs {
    return new RemoveFactoryCall__Outputs(this);
  }
}

export class RemoveFactoryCall__Inputs {
  _call: RemoveFactoryCall;

  constructor(call: RemoveFactoryCall) {
    this._call = call;
  }

  get _pos(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveFactoryCall__Outputs {
  _call: RemoveFactoryCall;

  constructor(call: RemoveFactoryCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReplaceFactoryCall extends ethereum.Call {
  get inputs(): ReplaceFactoryCall__Inputs {
    return new ReplaceFactoryCall__Inputs(this);
  }

  get outputs(): ReplaceFactoryCall__Outputs {
    return new ReplaceFactoryCall__Outputs(this);
  }
}

export class ReplaceFactoryCall__Inputs {
  _call: ReplaceFactoryCall;

  constructor(call: ReplaceFactoryCall) {
    this._call = call;
  }

  get _pairFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gaugeFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pos(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReplaceFactoryCall__Outputs {
  _call: ReplaceFactoryCall;

  constructor(call: ReplaceFactoryCall) {
    this._call = call;
  }
}

export class ResetCall extends ethereum.Call {
  get inputs(): ResetCall__Inputs {
    return new ResetCall__Inputs(this);
  }

  get outputs(): ResetCall__Outputs {
    return new ResetCall__Outputs(this);
  }
}

export class ResetCall__Inputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetCall__Outputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }
}

export class ReviveGaugeCall extends ethereum.Call {
  get inputs(): ReviveGaugeCall__Inputs {
    return new ReviveGaugeCall__Inputs(this);
  }

  get outputs(): ReviveGaugeCall__Outputs {
    return new ReviveGaugeCall__Outputs(this);
  }
}

export class ReviveGaugeCall__Inputs {
  _call: ReviveGaugeCall;

  constructor(call: ReviveGaugeCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReviveGaugeCall__Outputs {
  _call: ReviveGaugeCall;

  constructor(call: ReviveGaugeCall) {
    this._call = call;
  }
}

export class SetBribeFactoryCall extends ethereum.Call {
  get inputs(): SetBribeFactoryCall__Inputs {
    return new SetBribeFactoryCall__Inputs(this);
  }

  get outputs(): SetBribeFactoryCall__Outputs {
    return new SetBribeFactoryCall__Outputs(this);
  }
}

export class SetBribeFactoryCall__Inputs {
  _call: SetBribeFactoryCall;

  constructor(call: SetBribeFactoryCall) {
    this._call = call;
  }

  get _bribeFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBribeFactoryCall__Outputs {
  _call: SetBribeFactoryCall;

  constructor(call: SetBribeFactoryCall) {
    this._call = call;
  }
}

export class SetExternalBribeForCall extends ethereum.Call {
  get inputs(): SetExternalBribeForCall__Inputs {
    return new SetExternalBribeForCall__Inputs(this);
  }

  get outputs(): SetExternalBribeForCall__Outputs {
    return new SetExternalBribeForCall__Outputs(this);
  }
}

export class SetExternalBribeForCall__Inputs {
  _call: SetExternalBribeForCall;

  constructor(call: SetExternalBribeForCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _external(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetExternalBribeForCall__Outputs {
  _call: SetExternalBribeForCall;

  constructor(call: SetExternalBribeForCall) {
    this._call = call;
  }
}

export class SetInternalBribeForCall extends ethereum.Call {
  get inputs(): SetInternalBribeForCall__Inputs {
    return new SetInternalBribeForCall__Inputs(this);
  }

  get outputs(): SetInternalBribeForCall__Outputs {
    return new SetInternalBribeForCall__Outputs(this);
  }
}

export class SetInternalBribeForCall__Inputs {
  _call: SetInternalBribeForCall;

  constructor(call: SetInternalBribeForCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _internal(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetInternalBribeForCall__Outputs {
  _call: SetInternalBribeForCall;

  constructor(call: SetInternalBribeForCall) {
    this._call = call;
  }
}

export class SetMinterCall extends ethereum.Call {
  get inputs(): SetMinterCall__Inputs {
    return new SetMinterCall__Inputs(this);
  }

  get outputs(): SetMinterCall__Outputs {
    return new SetMinterCall__Outputs(this);
  }
}

export class SetMinterCall__Inputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }

  get _minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMinterCall__Outputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }
}

export class SetNewBribesCall extends ethereum.Call {
  get inputs(): SetNewBribesCall__Inputs {
    return new SetNewBribesCall__Inputs(this);
  }

  get outputs(): SetNewBribesCall__Outputs {
    return new SetNewBribesCall__Outputs(this);
  }
}

export class SetNewBribesCall__Inputs {
  _call: SetNewBribesCall;

  constructor(call: SetNewBribesCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _internal(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _external(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetNewBribesCall__Outputs {
  _call: SetNewBribesCall;

  constructor(call: SetNewBribesCall) {
    this._call = call;
  }
}

export class SetPermissionsRegistryCall extends ethereum.Call {
  get inputs(): SetPermissionsRegistryCall__Inputs {
    return new SetPermissionsRegistryCall__Inputs(this);
  }

  get outputs(): SetPermissionsRegistryCall__Outputs {
    return new SetPermissionsRegistryCall__Outputs(this);
  }
}

export class SetPermissionsRegistryCall__Inputs {
  _call: SetPermissionsRegistryCall;

  constructor(call: SetPermissionsRegistryCall) {
    this._call = call;
  }

  get _permissionRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPermissionsRegistryCall__Outputs {
  _call: SetPermissionsRegistryCall;

  constructor(call: SetPermissionsRegistryCall) {
    this._call = call;
  }
}

export class SetVoteDelayCall extends ethereum.Call {
  get inputs(): SetVoteDelayCall__Inputs {
    return new SetVoteDelayCall__Inputs(this);
  }

  get outputs(): SetVoteDelayCall__Outputs {
    return new SetVoteDelayCall__Outputs(this);
  }
}

export class SetVoteDelayCall__Inputs {
  _call: SetVoteDelayCall;

  constructor(call: SetVoteDelayCall) {
    this._call = call;
  }

  get _delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVoteDelayCall__Outputs {
  _call: SetVoteDelayCall;

  constructor(call: SetVoteDelayCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _poolVote(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _weights(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class WhitelistCall extends ethereum.Call {
  get inputs(): WhitelistCall__Inputs {
    return new WhitelistCall__Inputs(this);
  }

  get outputs(): WhitelistCall__Outputs {
    return new WhitelistCall__Outputs(this);
  }
}

export class WhitelistCall__Inputs {
  _call: WhitelistCall;

  constructor(call: WhitelistCall) {
    this._call = call;
  }

  get _token(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class WhitelistCall__Outputs {
  _call: WhitelistCall;

  constructor(call: WhitelistCall) {
    this._call = call;
  }
}
