// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimFees extends ethereum.Event {
  get params(): ClaimFees__Params {
    return new ClaimFees__Params(this);
  }
}

export class ClaimFees__Params {
  _event: ClaimFees;

  constructor(event: ClaimFees) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimed0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get claimed1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EmergencyActivated extends ethereum.Event {
  get params(): EmergencyActivated__Params {
    return new EmergencyActivated__Params(this);
  }
}

export class EmergencyActivated__Params {
  _event: EmergencyActivated;

  constructor(event: EmergencyActivated) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EmergencyDeactivated extends ethereum.Event {
  get params(): EmergencyDeactivated__Params {
    return new EmergencyDeactivated__Params(this);
  }
}

export class EmergencyDeactivated__Params {
  _event: EmergencyDeactivated;

  constructor(event: EmergencyDeactivated) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GaugeV2__claimFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getClaimed0(): BigInt {
    return this.value0;
  }

  getClaimed1(): BigInt {
    return this.value1;
  }
}

export class GaugeV2 extends ethereum.SmartContract {
  static bind(address: Address): GaugeV2 {
    return new GaugeV2("GaugeV2", address);
  }

  DISTRIBUTION(): Address {
    let result = super.call("DISTRIBUTION", "DISTRIBUTION():(address)", []);

    return result[0].toAddress();
  }

  try_DISTRIBUTION(): ethereum.CallResult<Address> {
    let result = super.tryCall("DISTRIBUTION", "DISTRIBUTION():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DURATION(): BigInt {
    let result = super.call("DURATION", "DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DURATION", "DURATION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOKEN(): Address {
    let result = super.call("TOKEN", "TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("TOKEN", "TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VE(): Address {
    let result = super.call("VE", "VE():(address)", []);

    return result[0].toAddress();
  }

  try_VE(): ethereum.CallResult<Address> {
    let result = super.tryCall("VE", "VE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimFees(): GaugeV2__claimFeesResult {
    let result = super.call("claimFees", "claimFees():(uint256,uint256)", []);

    return new GaugeV2__claimFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimFees(): ethereum.CallResult<GaugeV2__claimFeesResult> {
    let result = super.tryCall(
      "claimFees",
      "claimFees():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GaugeV2__claimFeesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  earned(account: Address): BigInt {
    let result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_earned(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergency(): boolean {
    let result = super.call("emergency", "emergency():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergency(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergency", "emergency():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  external_bribe(): Address {
    let result = super.call("external_bribe", "external_bribe():(address)", []);

    return result[0].toAddress();
  }

  try_external_bribe(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "external_bribe",
      "external_bribe():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gaugeRewarder(): Address {
    let result = super.call("gaugeRewarder", "gaugeRewarder():(address)", []);

    return result[0].toAddress();
  }

  try_gaugeRewarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gaugeRewarder",
      "gaugeRewarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  internal_bribe(): Address {
    let result = super.call("internal_bribe", "internal_bribe():(address)", []);

    return result[0].toAddress();
  }

  try_internal_bribe(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "internal_bribe",
      "internal_bribe():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isForPair(): boolean {
    let result = super.call("isForPair", "isForPair():(bool)", []);

    return result[0].toBoolean();
  }

  try_isForPair(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isForPair", "isForPair():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeRewardApplicable(): BigInt {
    let result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTime(): BigInt {
    let result = super.call("lastUpdateTime", "lastUpdateTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodFinish(): BigInt {
    let result = super.call("periodFinish", "periodFinish():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodFinish(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodFinish", "periodFinish():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardForDuration(): BigInt {
    let result = super.call(
      "rewardForDuration",
      "rewardForDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardForDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardForDuration",
      "rewardForDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerToken(): BigInt {
    let result = super.call("rewardPerToken", "rewardPerToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    let result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRate(): BigInt {
    let result = super.call("rewardRate", "rewardRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardRate", "rewardRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewards(param0: Address): BigInt {
    let result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaid(param0: Address): BigInt {
    let result = super.call(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _distribution(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _internal_bribe(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _external_bribe(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _isForPair(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateEmergencyModeCall extends ethereum.Call {
  get inputs(): ActivateEmergencyModeCall__Inputs {
    return new ActivateEmergencyModeCall__Inputs(this);
  }

  get outputs(): ActivateEmergencyModeCall__Outputs {
    return new ActivateEmergencyModeCall__Outputs(this);
  }
}

export class ActivateEmergencyModeCall__Inputs {
  _call: ActivateEmergencyModeCall;

  constructor(call: ActivateEmergencyModeCall) {
    this._call = call;
  }
}

export class ActivateEmergencyModeCall__Outputs {
  _call: ActivateEmergencyModeCall;

  constructor(call: ActivateEmergencyModeCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get claimed0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get claimed1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositAllCall extends ethereum.Call {
  get inputs(): DepositAllCall__Inputs {
    return new DepositAllCall__Inputs(this);
  }

  get outputs(): DepositAllCall__Outputs {
    return new DepositAllCall__Outputs(this);
  }
}

export class DepositAllCall__Inputs {
  _call: DepositAllCall;

  constructor(call: DepositAllCall) {
    this._call = call;
  }
}

export class DepositAllCall__Outputs {
  _call: DepositAllCall;

  constructor(call: DepositAllCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawAmountCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawAmountCall__Inputs {
    return new EmergencyWithdrawAmountCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawAmountCall__Outputs {
    return new EmergencyWithdrawAmountCall__Outputs(this);
  }
}

export class EmergencyWithdrawAmountCall__Inputs {
  _call: EmergencyWithdrawAmountCall;

  constructor(call: EmergencyWithdrawAmountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawAmountCall__Outputs {
  _call: EmergencyWithdrawAmountCall;

  constructor(call: EmergencyWithdrawAmountCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetReward1Call extends ethereum.Call {
  get inputs(): GetReward1Call__Inputs {
    return new GetReward1Call__Inputs(this);
  }

  get outputs(): GetReward1Call__Outputs {
    return new GetReward1Call__Outputs(this);
  }
}

export class GetReward1Call__Inputs {
  _call: GetReward1Call;

  constructor(call: GetReward1Call) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetReward1Call__Outputs {
  _call: GetReward1Call;

  constructor(call: GetReward1Call) {
    this._call = call;
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDistributionCall extends ethereum.Call {
  get inputs(): SetDistributionCall__Inputs {
    return new SetDistributionCall__Inputs(this);
  }

  get outputs(): SetDistributionCall__Outputs {
    return new SetDistributionCall__Outputs(this);
  }
}

export class SetDistributionCall__Inputs {
  _call: SetDistributionCall;

  constructor(call: SetDistributionCall) {
    this._call = call;
  }

  get _distribution(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDistributionCall__Outputs {
  _call: SetDistributionCall;

  constructor(call: SetDistributionCall) {
    this._call = call;
  }
}

export class SetGaugeRewarderCall extends ethereum.Call {
  get inputs(): SetGaugeRewarderCall__Inputs {
    return new SetGaugeRewarderCall__Inputs(this);
  }

  get outputs(): SetGaugeRewarderCall__Outputs {
    return new SetGaugeRewarderCall__Outputs(this);
  }
}

export class SetGaugeRewarderCall__Inputs {
  _call: SetGaugeRewarderCall;

  constructor(call: SetGaugeRewarderCall) {
    this._call = call;
  }

  get _gaugeRewarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGaugeRewarderCall__Outputs {
  _call: SetGaugeRewarderCall;

  constructor(call: SetGaugeRewarderCall) {
    this._call = call;
  }
}

export class SetInternalBribeCall extends ethereum.Call {
  get inputs(): SetInternalBribeCall__Inputs {
    return new SetInternalBribeCall__Inputs(this);
  }

  get outputs(): SetInternalBribeCall__Outputs {
    return new SetInternalBribeCall__Outputs(this);
  }
}

export class SetInternalBribeCall__Inputs {
  _call: SetInternalBribeCall;

  constructor(call: SetInternalBribeCall) {
    this._call = call;
  }

  get _int(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInternalBribeCall__Outputs {
  _call: SetInternalBribeCall;

  constructor(call: SetInternalBribeCall) {
    this._call = call;
  }
}

export class StopEmergencyModeCall extends ethereum.Call {
  get inputs(): StopEmergencyModeCall__Inputs {
    return new StopEmergencyModeCall__Inputs(this);
  }

  get outputs(): StopEmergencyModeCall__Outputs {
    return new StopEmergencyModeCall__Outputs(this);
  }
}

export class StopEmergencyModeCall__Inputs {
  _call: StopEmergencyModeCall;

  constructor(call: StopEmergencyModeCall) {
    this._call = call;
  }
}

export class StopEmergencyModeCall__Outputs {
  _call: StopEmergencyModeCall;

  constructor(call: StopEmergencyModeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllAndHarvestCall extends ethereum.Call {
  get inputs(): WithdrawAllAndHarvestCall__Inputs {
    return new WithdrawAllAndHarvestCall__Inputs(this);
  }

  get outputs(): WithdrawAllAndHarvestCall__Outputs {
    return new WithdrawAllAndHarvestCall__Outputs(this);
  }
}

export class WithdrawAllAndHarvestCall__Inputs {
  _call: WithdrawAllAndHarvestCall;

  constructor(call: WithdrawAllAndHarvestCall) {
    this._call = call;
  }
}

export class WithdrawAllAndHarvestCall__Outputs {
  _call: WithdrawAllAndHarvestCall;

  constructor(call: WithdrawAllAndHarvestCall) {
    this._call = call;
  }
}
